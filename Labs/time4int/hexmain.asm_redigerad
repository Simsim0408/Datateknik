  # hexmain.asm
  # Written 2015-09-04 by F Lundevall
  # Copyright abandonded - this file is in the public domain.

	.text
main:
	li	$a0,17		# change this to test different values

	jal	hexasc		# call hexasc
	nop			# delay slot filler (just in case)	

	move	$a0,$v0		# copy return value to argument register

	li	$v0,11		# syscall with v0 = 11 will print out
	syscall			# one byte from a0 to the Run I/O window
	
stop:	j	stop		# stop after one run
	nop			# delay slot filler (just in case)

  # You can write your own code for hexasc here
  
hexasc:
    andi $v0, $a0, 0x0F   # Mask out all but the 4 least significant bits
    li   $t0, 9           # 9 stores in memory as temporary value, in t0. Compare with 9 to determine if it's a digit or a letter

    blt  $v0, $t0, is_digit   # Branch if less than 9 (it's a digit)
    addi $v0, $v0, 7         # Adjust for letters (A starts at ASCII 65)

is_digit:
    addi $v0, $v0, 48        # Adjust for ASCII digits (0 starts at ASCII 48)
    jr   $ra                # Return
